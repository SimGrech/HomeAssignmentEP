using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using ShoppingCart.Application.Interfaces;
using ShoppingCart.Application.ViewModels;

namespace PresentationWebApp.Controllers
{
    public class CartsController : Controller
    {
        private readonly ICartsService _cartsService;
        private readonly IProductsService _productsService;
        private IHostingEnvironment _env;

        public CartsController(ICartsService cartsService, IProductsService productsService, IHostingEnvironment env)
        {
            _cartsService = cartsService;
            _productsService = productsService;
            _env = env;
        }

        [HttpGet]
        [Authorize(Roles = "Admin, User")]
        public IActionResult Index(string email)
        {
            var currentPersonCart = _cartsService.GetCarts(email);
            var list = _productsService.GetProducts();

            return View(currentPersonCart);
        }

        [HttpGet]
        [Authorize(Roles = "Admin, User")]
        public IActionResult RemoveFromCart(int id)
        {
            try
            {
                _cartsService.DeleteCartEntry(id);
                TempData["feedback"] = "Product was deleted";
            }

            catch (Exception ex)
            {
                //Log your error
                TempData["warning"] = "Product was not deleted"; //Change from ViewData to TempData
            }

            //Using User.Identity to get the current logged email, this should always work as the method is restricted to users with Admin or basic roles (meaning they have to be logged in)
            //UserManager<IdentityUser> UserManager;
            //https://stackoverflow.com/a/1257632
            //Link used for redirectoaction param
            return RedirectToAction("Index", new { email = User.Identity.Name });

        }

        
        [HttpPost]
        [Authorize(Roles = "Admin, User")]
        public IActionResult AddToCart() {
            //Here details input by the user will be received
            
            //public IActionResult Create(ProductViewModel data, IFormFile f)
            
            try
            {
                string quantity, productId, email;
                quantity = Request.Form["quantity"];
                productId = Request.Form["productId"];
                //Gets the current user's email (User should be logged in)
                email = User.Identity.Name;
                bool productExists = false;

                //Check if user already added the same item
                IQueryable<CartViewModel> userCarts = _cartsService.GetCarts(email);
                foreach (var cartEntry in userCarts) {
                    ProductViewModel productToCompare = _productsService.GetProduct(Guid.Parse(productId));
                    if (cartEntry.Product.Id == productToCompare.Id)
                    {
                        productExists = true;
                        //Edit Quantity (Deletes existing record and readds it with updated values)
                        CartViewModel cartData = new CartViewModel();
                        cartData.Id = cartEntry.Id;
                        cartData.Quantity = cartEntry.Quantity + int.Parse(quantity);
                        //Retrieves product and sets it using the hidden value generated by the form
                        cartData.Product = _productsService.GetProduct(Guid.Parse(productId));
                        cartData.Email = email;

                        //Not working, some function is causing a mismatch in datatype and I don't know what the issue is
                        //Won't add duplicate cart types
                        TempData["feedback"] = "Product already exists in cart";

                        //Deletes existing record
                        //_cartsService.DeleteCartEntry(cartEntry.Id);

                        //Adds updated record
                        //_cartsService.AddCartEntry(cartData);
                        //TempData["feedback"] = "Product added to Cart Successfully";
                    }
                }
                if (!productExists) {
                    CartViewModel cartData = new CartViewModel();
                    cartData.Quantity = int.Parse(quantity);
                    //Retrieves product and sets it using the hidden value generated by the form
                    cartData.Product = _productsService.GetProduct(Guid.Parse(productId));
                    cartData.Email = email;


                    //cartData.Email = User.Identity.Name;

                    _cartsService.AddCartEntry(cartData);
                    TempData["feedback"] = "Product added to Cart Successfully";
                }
                
            }
            catch (Exception e)
            {
                //Log error
                TempData["warning"] = "Product was not added to cart";
            }

            return RedirectToAction("Index", "Products");
        }
    }
}
