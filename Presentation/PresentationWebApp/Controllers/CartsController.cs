using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using ShoppingCart.Application.Interfaces;
using ShoppingCart.Application.ViewModels;

namespace PresentationWebApp.Controllers
{
    public class CartsController : Controller
    {
        private readonly ICartsService _cartsService;
        private readonly IOrdersService _ordersService;
        private readonly IProductsService _productsService;
        private readonly ILogger<CartsController> _logger;
        private IHostingEnvironment _env;

        public CartsController(ICartsService cartsService, IOrdersService ordersService, IProductsService productsService, IHostingEnvironment env, ILogger<CartsController> logger)
        {
            _cartsService = cartsService;
            _ordersService = ordersService;
            _productsService = productsService;
            _logger = logger;
            _env = env;
        }

        [HttpGet]
        [Authorize(Roles = "Admin, User")]
        public IActionResult Index(string email)
        {
            //check made in case the direct link is used 
            if (email == null) {
                email = User.Identity.Name;
            }
            var currentPersonCart = _cartsService.GetCarts(email);
            var list = _productsService.GetProducts();

            return View(currentPersonCart);
        }

        [HttpGet]
        [Authorize(Roles = "Admin, User")]
        public IActionResult RemoveFromCart(int id)
        {
            try
            {
                _cartsService.DeleteCartEntry(id);
                TempData["feedback"] = "Product Removed from Cart";
            }

            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                TempData["warning"] = "Error with removing from cart, sorry for the inconvenience!";
                return RedirectToAction("Error", "Home");
            }

            //Using User.Identity to get the current logged email, this should always work as the method is restricted to users with Admin or basic roles (meaning they have to be logged in)
            //UserManager<IdentityUser> UserManager;
            //https://stackoverflow.com/a/1257632
            //Link used for redirectoaction param
            return RedirectToAction("Index", new { email = User.Identity.Name });

        }

        //Method created to redirect user if he tries to add an item to checkout without being logged in
        [Authorize(Roles = "Admin, User")]
        public IActionResult AddToCart()
        {
            return RedirectToAction("Index", "Products");
        }

        [HttpPost]
        [Authorize(Roles = "Admin, User")]
        public IActionResult AddToCart(string quantity, string productId) {
            //Here details input by the user will be 
            try
            {
                string email;
                quantity = Request.Form["quantity"];
                productId = Request.Form["productId"];
                //Gets the current user's email (User should be logged in)
                email = User.Identity.Name;
                bool productExists = false;
                //https://stackoverflow.com/a/2180920 Fix threading issue
                //Check if user already added the same item
                IList<CartViewModel> userCarts = _cartsService.GetCarts(email).ToArray<CartViewModel>();
                foreach (var cartEntry in userCarts) {
                    ProductViewModel productToCompare = _productsService.GetProduct(Guid.Parse(productId));
                    if (cartEntry.Product.Id == productToCompare.Id)
                    {
                        productExists = true;
                        //Edit Quantity (Deletes existing record and readds it with updated values)
                        CartViewModel cartData = new CartViewModel();
                        //cartData.Id = cartEntry.Id;
                        cartData.Quantity = cartEntry.Quantity + int.Parse(quantity);
                        //Retrieves product and sets it using the hidden value generated by the form
                        cartData.Product = _productsService.GetProduct(Guid.Parse(productId));
                        cartData.Email = email;

                        //Not working, some function is causing a mismatch in datatype and I don't know what the issue is
                        //Won't add duplicate cart types
                        //TempData["feedback"] = "Product already exists in cart";

                        //Deletes existing record
                        _cartsService.DeleteCartEntry(cartEntry.Id);

                        //Adds updated record
                        _cartsService.AddCartEntry(cartData);
                        TempData["feedback"] = "Product added to Cart Successfully";
                    }
                }
                if (!productExists) {
                    CartViewModel cartData = new CartViewModel();
                    cartData.Quantity = int.Parse(quantity);
                    //Retrieves product and sets it using the hidden value generated by the form
                    cartData.Product = _productsService.GetProduct(Guid.Parse(productId));
                    cartData.Email = email;


                    //cartData.Email = User.Identity.Name;

                    _cartsService.AddCartEntry(cartData);
                    TempData["feedback"] = "Product added to Cart Successfully";
                    _logger.LogInformation("Product added to cart successfully");
                }
                
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                TempData["warning"] = "Error while adding to cart, sorry for the inconvenience!";
                return RedirectToAction("Error", "Home");
            }

            return RedirectToAction("Index", "Products");
        }

        [Authorize(Roles = "Admin, User")]
        public IActionResult Checkout() {
            //Uses the email to process the user's order taken from User.Identity.Name
            try
            {
                _ordersService.Checkout(User.Identity.Name);
                TempData["feedback"] = "Checkout Complete";
            }
            catch(Exception e)
            {
                _logger.LogError(e.Message);
                TempData["warning"] = "Error with checkout, sorry for the inconvenience!";
                return RedirectToAction("Error", "Home");
            }

            return RedirectToAction("Index", "Products");
        }

    }
}
